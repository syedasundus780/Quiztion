package quiz.app;import javax.swing.*;import java.awt.*;import java.awt.event.*;import java.io.BufferedWriter;import java.io.FileWriter;import java.io.IOException;import java.io.PrintWriter;import java.util.*;public class Quiz extends JFrame implements ActionListener {    Question currentQuestion;    String questions[][] = new String[20][5];    String answers[][] = new String[20][2];    String useranswers[][] = new String[20][1];    Stack<Question> questionHistory;    Stack<Integer> questionIndexHistory;    PriorityQueue<Question> questionQueue;    JLabel qno, question;    JRadioButton opt1, opt2, opt3, opt4;    ButtonGroup groupoptions;    JButton next, back, submit, lifeline;    public static int timer = 07;    public static int ans_given = 0;    public static int count = 0;    public static int score = 0;    String name;    Quiz(String name) {        this.name = name;        setBounds(50, 0, 1260, 700);        getContentPane().setBackground(Color.WHITE);        setUndecorated(true);        setLayout(null);        questionQueue = new PriorityQueue<>();        // Add questions to the priority queue (Modify as per your requirement)        questionQueue.add(new Question("Number of primitive data types in Java are.?", new String[]{"6", "7", "8", "9"}, "8", 3));        questionQueue.add(new Question("What is the size of float and double in java.?", new String[]{"32 and 64", "32 and 32", "64 and 64", "64 and 32"}, "32 and 64", 2));        questionQueue.add(new Question("Automatic type conversion is possible in which of the possible cases?", new String[]{"Byte to int", "Int to Long", "Long to int", "Short to int"}, "Int to Long", 4));        questionQueue.add(new Question("compareTo() returns?", new String[]{"True", "False", "An int value", "None"}, "An int value", 1));        questionQueue.add(new Question("When an array is passed to a method, what does the method receive?", new String[]{"The reference of the array", "A copy of the array", "Length of the array", "Copy of first element"}, "The reference of the array", 5));        questionQueue.add(new Question("Arrays in java are.?", new String[]{"Object References", "Objects", "Primitive data type", "None"}, "Objects", 6));        questionQueue.add(new Question("When is the object created with new keyword.?", new String[]{"At run time", "At compile time", "Depend on the code", "None"}, "At run time", 8));        questionQueue.add(new Question("Identify the corrected definition of a package.?", new String[]{"A package is a collection of editing tools", "A package is a collection of Classes", "A package is a collection of Classes and interfaces", "A package is a collection of interfaces"}, "A package is a collection of Classes and interfaces", 10));        questionQueue.add(new Question("To which of the following does the class string belong to.?", new String[]{"java.lang", "java.awt", "java.applet", "java.string"}, "java.lang", 7));        questionQueue.add(new Question("Total constructor string class have.?", new String[]{"3", "7", "13", "20"}, "13", 9));        questionQueue.add(new Question("What is the extension of java code files?", new String[]{".js", ".txt", ".class", ".java"}, ".java", 11));        questionQueue.add(new Question("Which exception is thrown when java is out of memory.?", new String[]{"MemoryError", "OutOfMemoryError", "MemoryOutOfBoundsException", "MemoryFullException"}, "OutOfMemoryError", 20));        questionQueue.add(new Question("Which of the following is a superclass of every class in Java.?", new String[]{"ArrayList", "Abstract class", "Object class", "String"}, "Object class", 12));        questionQueue.add(new Question("Which of these packages contains the exception Stack Overflow in Java.?", new String[]{"java.io", "java.system", "java.lang", "java.util"}, "java.lang", 14));        questionQueue.add(new Question("Which of these keywords are used for the block to be examined for exceptions.?", new String[]{"check", "throw", "catch", "try"}, "try", 13));        questionQueue.add(new Question("Which one of the following is not an access modifier.?", new String[]{"protected", "void", "public", "private"}, "void", 18));        questionQueue.add(new Question("Which of the following is an immediate subclass of the Panel class.?", new String[]{"Applet class", "Window class", "Frame class", "Dialog class"}, "Frame class", 16));        questionQueue.add(new Question("How many threads can be executed at a time.?", new String[]{"Only one thread", "Multiple threads", "Only main (main() method) thread", "Two threads"}, "Multiple threads", 15));        questionQueue.add(new Question("What are the types of memory allocated in memory in java.?", new String[]{"Heap memory", "Stack memory", "Both", "None"}, "Both", 17));        questionQueue.add(new Question("Finally block is attached to.?", new String[]{"Try-catch block", "Class block", "Method block", "All of these"}, "Try-catch block", 19));        ImageIcon i1 = new ImageIcon(ClassLoader.getSystemResource("icons/quiz.png"));        JLabel image = new JLabel(i1);        image.setBounds(0, 0, 1260, 252);        add(image);        questionHistory = new Stack<>();        questionIndexHistory = new Stack<>();        qno = new JLabel();        qno.setBounds(100, 300, 50, 30);        qno.setFont(new Font("Tahoma", Font.PLAIN, 24));        add(qno);        question = new JLabel();        question.setBounds(150, 300, 900, 30);        question.setFont(new Font("Tahoma", Font.PLAIN, 24));        add(question);        opt1 = new JRadioButton();        opt1.setBounds(170, 350, 700, 30);        opt1.setBackground(Color.WHITE);        opt1.setFont(new Font("Dialog", Font.PLAIN, 20));        add(opt1);        opt2 = new JRadioButton();        opt2.setBounds(170, 390, 700, 30);        opt2.setBackground(Color.WHITE);        opt2.setFont(new Font("Dialog", Font.PLAIN, 20));        add(opt2);        opt3 = new JRadioButton();        opt3.setBounds(170, 430, 700, 30);        opt3.setBackground(Color.WHITE);        opt3.setFont(new Font("Dialog", Font.PLAIN, 20));        add(opt3);        opt4 = new JRadioButton();        opt4.setBounds(170, 470, 700, 30);        opt4.setBackground(Color.WHITE);        opt4.setFont(new Font("Dialog", Font.PLAIN, 20));        add(opt4);        groupoptions = new ButtonGroup();        groupoptions.add(opt1);        groupoptions.add(opt2);        groupoptions.add(opt3);        groupoptions.add(opt4);        next = new JButton("Next");        next.setBounds(390, 550, 200, 30);        next.setFont(new Font("Tahoma", Font.PLAIN, 18));        next.setBackground(new Color(22, 99, 54));        next.setForeground(Color.WHITE);        next.addActionListener(this);        add(next);        back = new JButton("Back");        back.setBounds(170, 550, 200, 30);        back.setFont(new Font("Tahoma", Font.PLAIN, 18));        back.setBackground(new Color(22, 99, 54));        back.setForeground(Color.WHITE);        back.addActionListener(this);        add(back);        lifeline = new JButton("Help");        lifeline.setBounds(830, 550, 200, 30);        lifeline.setFont(new Font("Tahoma", Font.PLAIN, 18));        lifeline.setBackground(new Color(22, 99, 54));        lifeline.setForeground(Color.WHITE);        lifeline.addActionListener(this);        add(lifeline);        submit = new JButton("Submit");        submit.setBounds(610, 550, 200, 30);        submit.setForeground(Color.WHITE);        submit.setFont(new Font("Tahoma", Font.PLAIN, 18));        submit.setBackground(new Color(22, 99, 54));        submit.addActionListener(this);        add(submit);        submit.setEnabled(false);        loadNextQuestion();        setVisible(true);    }    public void loadNextQuestion() {        if (!questionHistory.isEmpty() && count < questionHistory.size()) {            // Load from history            currentQuestion = questionHistory.get(count);        } else if (!questionQueue.isEmpty()) {            // Load from queue            currentQuestion = questionQueue.poll();            questionHistory.push(currentQuestion);        } else {            // Handle no more questions            return;        }        displayQuestion(currentQuestion);    }    public void displayQuestion(Question question) {        qno.setText("" + (count + 1) + ". ");        this.question.setText(question.question);        opt1.setText(question.options[0]);        opt1.setActionCommand(question.options[0]);        opt2.setText(question.options[1]);        opt2.setActionCommand(question.options[1]);        opt3.setText(question.options[2]);        opt3.setActionCommand(question.options[2]);        opt4.setText(question.options[3]);        opt4.setActionCommand(question.options[3]);        groupoptions.clearSelection();    }    public void actionPerformed(ActionEvent ae) {        if (ae.getSource() == next) {            if (groupoptions.getSelection() != null) {                useranswers[count][0] = groupoptions.getSelection().getActionCommand();                if (useranswers[count][0].equals(currentQuestion.correctAnswer)) {                    score += 10;                }            } else {                useranswers[count][0] = "";            }            questionIndexHistory.push(count); // Add the current question index to the history            count++;            if (count == 19) { // Changed from 9 to 19 for 20 questions                next.setEnabled(false);                submit.setEnabled(true);            }            loadNextQuestion();        } else if (ae.getSource() == back) {            if (count > 0) {                count--;                questionIndexHistory.pop(); // Remove the last question index from the history                loadNextQuestion();                if (count < 19) { // Changed from 9 to 19 for 20 questions                    next.setEnabled(true);                    submit.setEnabled(false);                }            }        } else if (ae.getSource() == lifeline) {            if (count == 2 || count == 4 || count == 6 || count == 8 || count == 9 || count == 11 || count == 13 || count == 15 || count == 17 || count == 18) {                opt2.setEnabled(false);                opt3.setEnabled(false);            } else {                opt1.setEnabled(false);                opt4.setEnabled(false);            }            lifeline.setEnabled(false);        } else if (ae.getSource() == submit) {            if (groupoptions.getSelection() != null) {                useranswers[count][0] = groupoptions.getSelection().getActionCommand();                if (useranswers[count][0].equals(currentQuestion.correctAnswer)) {                    score += 10;                }            } else {                useranswers[count][0] = "";            }            // Write the username and score to a file            try (PrintWriter writer = new PrintWriter(new BufferedWriter(new FileWriter("quiz_scores.txt", true)))) {                writer.println(name + ": " + score); // Write name and score on a new line            } catch (IOException e) {                e.printStackTrace();            }            this.setVisible(false);            new Score(name, score);        }    }    public void resetQuiz() {        // Reset all necessary fields        timer = 7;        ans_given = 0;        count = 0;        score = 0;        questionQueue.clear();        questionHistory.clear();        questionIndexHistory.clear();        // Re-add questions to the priority queue        questionQueue.add(new Question("Number of primitive data types in Java are.?", new String[]{"6", "7", "8", "9"}, "8", 3));        questionQueue.add(new Question("What is the size of float and double in java.?", new String[]{"32 and 64", "32 and 32", "64 and 64", "64 and 32"}, "32 and 64", 2));        questionQueue.add(new Question("Automatic type conversion is possible in which of the possible cases?", new String[]{"Byte to int", "Int to Long", "Long to int", "Short to int"}, "Int to Long", 4));        questionQueue.add(new Question("compareTo() returns?", new String[]{"True", "False", "An int value", "None"}, "An int value", 1));        questionQueue.add(new Question("When an array is passed to a method, what does the method receive?", new String[]{"The reference of the array", "A copy of the array", "Length of the array", "Copy of first element"}, "The reference of the array", 5));        questionQueue.add(new Question("Arrays in java are.?", new String[]{"Object References", "Objects", "Primitive data type", "None"}, "Objects", 6));        questionQueue.add(new Question("When is the object created with new keyword.?", new String[]{"At run time", "At compile time", "Depend on the code", "None"}, "At run time", 8));        questionQueue.add(new Question("Identify the corrected definition of a package.?", new String[]{"A package is a collection of editing tools", "A package is a collection of Classes", "A package is a collection of Classes and interfaces", "A package is a collection of interfaces"}, "A package is a collection of Classes and interfaces", 10));        questionQueue.add(new Question("To which of the following does the class string belong to.?", new String[]{"java.lang", "java.awt", "java.applet", "java.string"}, "java.lang", 7));        questionQueue.add(new Question("Total constructor string class have.?", new String[]{"3", "7", "13",        "20"}, "13", 9));        questionQueue.add(new Question("What is the extension of java code files?", new String[]{".js", ".txt", ".class", ".java"}, ".java", 11));        questionQueue.add(new Question("Which exception is thrown when java is out of memory.?", new String[]{"MemoryError", "OutOfMemoryError", "MemoryOutOfBoundsException", "MemoryFullException"}, "OutOfMemoryError", 20));        questionQueue.add(new Question("Which of the following is a superclass of every class in Java.?", new String[]{"ArrayList", "Abstract class", "Object class", "String"}, "Object class", 12));        questionQueue.add(new Question("Which of these packages contains the exception Stack Overflow in Java.?", new String[]{"java.io", "java.system", "java.lang", "java.util"}, "java.lang", 14));        questionQueue.add(new Question("Which of these keywords are used for the block to be examined for exceptions.?", new String[]{"check", "throw", "catch", "try"}, "try", 13));        questionQueue.add(new Question("Which one of the following is not an access modifier.?", new String[]{"protected", "void", "public", "private"}, "void", 18));        questionQueue.add(new Question("Which of the following is an immediate subclass of the Panel class.?", new String[]{"Applet class", "Window class", "Frame class", "Dialog class"}, "Frame class", 16));        questionQueue.add(new Question("How many threads can be executed at a time.?", new String[]{"Only one thread", "Multiple threads", "Only main (main() method) thread", "Two threads"}, "Multiple threads", 15));        questionQueue.add(new Question("What are the types of memory allocated in memory in java.?", new String[]{"Heap memory", "Stack memory", "Both", "None"}, "Both", 17));        questionQueue.add(new Question("Finally block is attached to.?", new String[]{"Try-catch block", "Class block", "Method block", "All of these"}, "Try-catch block", 19));        // Reset the user answers        for (int i = 0; i < useranswers.length; i++) {            useranswers[i][0] = "";        }        // Restart the quiz        setVisible(true);        loadNextQuestion();    }    public static void main(String[] args) {        new Quiz("User");    }}